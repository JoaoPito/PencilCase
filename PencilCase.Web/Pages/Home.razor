@page "/"

@inject FragmentApi FragmentApi;

<PageTitle>PencilCase</PageTitle>

<MudDropContainer T="FragmentDropItem" Items="_items"
                  ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" 
                  ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="FragmentDropItem" Identifier="Study Guide" 
                     Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1" 
                     AllowReorder="true">
            <MudText>Study Guide Blueprint</MudText>
        </MudDropZone>
        <MudDropZone  T="FragmentDropItem" Identifier="Sections"
                      Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText>Sections</MudText>
        </MudDropZone>
        
    </ChildContent>
    <ItemRenderer>
        @if (@context.Identifier == "Sections")
        {
            <FragmentGeneratorCard FragmentGenerator=@context.Generator/>
        }
        else
        {
            <FragmentCard Fragment=@context.Fragment />
        }
        
    </ItemRenderer>
</MudDropContainer>

@code{
    private List<FragmentDropItem> _items { get; set; } = new();

    public class FragmentDropItem
    {
        public String Identifier { get; set; }
        public FragmentGenerator Generator { get; set; }
        public Fragment? Fragment { get; set; } = null;
    }

    public List<FragmentGenerator>? Generators;
    
    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        // Add to study guide
        if (dropItem.Item.Identifier == "Study Guide" && dropItem.Item.Fragment == null)
        {
            dropItem.Item.Fragment = await GenerateFragmentWithGenerator(dropItem.Item.Generator);
        }
        this.StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync(){
        Generators = await FragmentApi.GetAllGenerators();
        if (Generators != null)
            PopulateFragmentGenerators();
    }

    private void PopulateFragmentGenerators()
    {
        foreach (var generator in Generators)
        {
            _items.Add(new FragmentDropItem()
            {
                Identifier = "Sections",
                Generator = generator
            });
        }
        
    }

    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        return await FragmentApi.GenerateFragment(generator, "rockets");
    }
}