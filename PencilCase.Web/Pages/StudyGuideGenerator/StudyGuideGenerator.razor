@page "/studyguide"

@using MudBlazor.Utilities

@inject FragmentApi FragmentApi;
@inject IDialogService DialogService;

<PageTitle>pencilcase</PageTitle>

<div class="pa-4 d-flex flex-column">
    <MudDropContainer T="FragmentDropItem" Items="@_items"
        ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" 
        ItemDropped="ItemUpdated" 
        Class="flex-grow-1"
        >
        <ChildContent>
            <MudGrid Spacing="4">
                <MudItem sm="12" md="4">
                    <MudStack Wrap="Wrap.WrapReverse" Spacing="4">
                        <SearchBar Label="Choose a topic" OnSubmit="@OnSearchbarSubmit" 
                            ClearOnSubmit="false" Disabled="@_isProcessing" MaxLength="@_searchMaxLength" />
                        <!-- Sections -->
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6" Align="Align.Start">Sections</MudText>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudDropZone  T="FragmentDropItem" Identifier="@FragmentGeneratorIdentifier"
                                        Class="rounded-b mud-background-gray pa-2
                                            overflow-y-scroll overflow-x-hidden"
                                    style="height: 75vh">
                                    <div></div>
                                </MudDropZone>
                            </MudCardContent>
                        </MudCard>
                    </MudStack>
                </MudItem>
                <!-- Draft -->
                <MudItem sm="12" md="8">
                    <MudCard Elevation="3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5" Align="Align.Start">Draft</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <StudyGuideToolBar Disabled="@_isProcessing"
                                    OnRenew="OnRegenerateStudyGuide"
                                    OnDelete="OnClearStudyGuide" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudDropZone T="FragmentDropItem" Identifier="@StudyGuideIdentifier" 
                                Class="rounded-b mud-background-gray blueprint-dots pa-4
                                    overflow-y-scroll overflow-x-hidden"
                                style="height: 82vh"
                                AllowReorder="true">
                            <div>
                                @if(_items.Where(i => i.Identifier == StudyGuideIdentifier).Count() == 0){
                                    <EmptyBlueprintContent />
                                }
                            </div>
                        </MudDropZone>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            @if (@context.Identifier == FragmentGeneratorIdentifier)
            {
                <div class="ma-4">
                    <FragmentGeneratorCard FragmentGenerator=@context.Generator/>
                </div>
            }
            else
            {
                <div class="ma-4">
                    <FragmentCard Fragment=@context.Fragment 
                        OnRegenerateClicked="@RegenerateFragment"
                        OnDeleteClicked="@OnDeleteFragment" />
                </div>
            }
        </ItemRenderer>
    </MudDropContainer>
</div>


<div style="position: fixed;bottom: 0pt;right: 0pt;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Rounded.Save" 
            OnClick="ExportStudyGuide" Size="Size.Large" Class="ma-6" Label="Save"/>
</div>

<style>
    .dialog-background {
        backdrop-filter: blur(20px);
    }
</style>

@code{
    private const String StudyGuideIdentifier = "StudyGuide";
    private const String FragmentGeneratorIdentifier = "Generators";

    private List<FragmentDropItem> _items { get; set; } = new();
    private String _topic = String.Empty;

    private bool _isProcessing { get; set; } = false;
    private int _searchMaxLength { get; set; } = 60;
    
    protected override async Task OnInitializedAsync(){
        List<FragmentGenerator>? generators = new();
            
        try{
            generators = await FragmentApi.GetAllGenerators();
        }
        catch(HttpRequestException err) {
            Console.WriteLine(err.Message);
        }
        if (generators != null) PopulateItemsWithGenerators(generators);
    }

    private StudyGuide FragmentsToStudyGuide(String topic, List<Fragment?>? fragments)
    {
        return new StudyGuide{
            Topic = topic,
            Fragments = (fragments != null) ? fragments : []
        };
    }

    private StudyGuide GetStudyGuideFromBlueprint()
    {
        var fragments = _items
            .OrderBy(i => i.Order)
            .Where(i => (i.Identifier == StudyGuideIdentifier && i.Fragment != null))
            .Select(i => i.Fragment)
            .ToList();

        return FragmentsToStudyGuide(_topic, fragments);
    }

    private void UpdateDropItemOrder(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            FragmentGeneratorIdentifier  => _items.Count(x => x.Identifier == StudyGuideIdentifier),
            _ => 0
        };

        _items.UpdateOrder(dropItem, item => item.Order, indexOffset);
    }

    private async void GenerateFragmentIfDropItemInStudyGuide(FragmentDropItem dropItem)
    {
        if (dropItem.Identifier == StudyGuideIdentifier && dropItem.Fragment == null)
        {
            dropItem.Fragment = await GenerateFragmentWithGenerator(dropItem.Generator);
            this.StateHasChanged();
        }
    }

    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item!.Identifier = dropItem.DropzoneIdentifier!;
        // Add to study guide

        UpdateDropItemOrder(dropItem);

        GenerateFragmentIfDropItemInStudyGuide(dropItem.Item);
    }

    private void PopulateItemsWithGenerators(List<FragmentGenerator> generators)
    {
        foreach (var generator in generators)
        {
            int order = 0;
            _items.Add(new FragmentDropItem()
            {
                Order = order++,
                Identifier = FragmentGeneratorIdentifier,
                Generator = generator
            });
        }
    }

    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        if(_topic == String.Empty || _topic == null){
            return new Fragment{
                Name = generator.Name,
                Content = String.Empty
            };
        }
        return await FragmentApi.GenerateFragment(generator, _topic);
    }

    private async Task GenerateNewStudyGuide(String topic){
        _topic = topic;
        _isProcessing = true;
        foreach(var item in _items.Where(i => i.Identifier == StudyGuideIdentifier)){
            var fragment = await GenerateFragmentWithGenerator(item.Generator);
            item.Fragment = fragment;
        }
        _isProcessing = false;
        this.StateHasChanged();
    }

    private FragmentDropItem GetItemByName(String name){
        var item = _items.FirstOrDefault(i => i.Fragment?.Name == name);
        if(item == null){
            throw new ArgumentException($"Could not find fragment with name '{name}'!");
        }
        return item;
    }

    public async Task RegenerateFragment(String name)
    {
        var item = GetItemByName(name);
        item.Fragment = null;
        this.StateHasChanged();
        var generator = item.Generator;
        item.Fragment = await GenerateFragmentWithGenerator(generator);
        this.StateHasChanged();
    }

    public async Task OnSearchbarSubmit(String topic){
        EraseAllFragments();
        this.StateHasChanged();
        await GenerateNewStudyGuide(topic);
    }

    public async Task OnDeleteFragment(String name) 
    {
        var item = GetItemByName(name);
        item.Identifier = FragmentGeneratorIdentifier;
        this.StateHasChanged();
    }

    private async Task ExportStudyGuide()
    {
        var studyGuide = GetStudyGuideFromBlueprint();

        var options = new DialogOptions { 
            CloseOnEscapeKey = true,
            CloseButton = true,
            BackgroundClass="dialog-background"
        };

        var parameters = new DialogParameters<SGExportDialog> { { x => x.StudyGuide, studyGuide } };
        await DialogService.ShowAsync<SGExportDialog>("Save your Study Guide", parameters, options);
    }

    private void EraseAllFragments(){
        foreach (var item in _items){
            item.Fragment = null;
        }
        this.StateHasChanged();
    }

    public async Task OnRegenerateStudyGuide(){
        EraseAllFragments();
        _isProcessing = true;
        await GenerateNewStudyGuide(_topic);
        _isProcessing = false;
    }

    public async Task OnClearStudyGuide() 
    {
        foreach (var item in _items){
            item.Identifier = FragmentGeneratorIdentifier;
        }
        this.StateHasChanged();
    }
}