@using PencilCase.Shared.Models

<MudCard Elevation="10" Class="d-flex flex-grow-1">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudStack>
                <MudIconButton Icon="@Icons.Material.Rounded.KeyboardArrowUp" 
                    Size="Size.Small"
                    OnClick="OnUpClick"
                    Disabled="@(Fragment is null)" />
                <MudIconButton Icon="@Icons.Material.Rounded.KeyboardArrowDown"
                    Size="Size.Small"
                    OnClick="OnDownClick"
                    Disabled="@(Fragment is null)" />
            </MudStack>
        </CardHeaderAvatar>
        <CardHeaderContent>
            @if (Fragment != null)
            {
                <MudStack Row="true">
                    <MudText Typo="Typo.h6">@Fragment.Name</MudText>
                </MudStack>
            }
            else
            {
                <div class="d-flex flex-shrink-1">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="33%" Height="20pt" Class="flex-shrink-1"/>
                </div>
            }
            
        </CardHeaderContent>
        <CardHeaderActions>
            @if(OnRegenerateClicked != null){
                <FragmentToolBar Name="@Fragment?.Name" OnRegenerate="@OnRegenerateClicked" 
                OnDelete="@OnDeleteClicked"/>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (Fragment != null)
        {
            <MudMarkdown Value="@Fragment.Content"></MudMarkdown>
        }
        else
        {
            <div class="d-flex flex-grow-1">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="250pt" Height="200px" Class="flex-grow-1"/>
            </div>
        }
    </MudCardContent>
    <MudCardActions>
        
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public Fragment? Fragment { get; set; } = new();
    [Parameter] public Func<String, Task>? OnRegenerateClicked { get; set; } = null;
    [Parameter] public Func<String, Task>? OnDeleteClicked { get; set; } = null;

    [Parameter] public Func<Fragment, Task>? OnMoveUpClicked { get; set; } = null;
    [Parameter] public Func<Fragment, Task>? OnMoveDownClicked { get; set; } = null;

    private async Task OnUpClick()
    {
        if(OnMoveUpClicked is not null)
        {
            await OnMoveUpClicked(Fragment);
        }
    }

    private async Task OnDownClick()
    {
        if(OnMoveDownClicked is not null)
        {
            await OnMoveDownClicked(Fragment);
        }
    }
}