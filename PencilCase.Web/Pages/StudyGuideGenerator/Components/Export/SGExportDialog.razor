@using PencilCase.Shared.Files.FileExporters;
@using PencilCase.Shared.Files.Types

@inject MarkdownExporter markdownExporter
@inject IJSRuntime JS

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h4">
            Download
        </MudText>
        <MudText Typo="Typo.body2">
            choose a format
        </MudText>
    </TitleContent>
    <DialogContent>
        @if(!_loading){
            <MudStack>
                <MudLink OnClick="DownloadToMarkdown" Style="text-decoration:none;">
                    <MudPaper Elevation="5" Class="pa-4 ma-2 d-flex flex-grow-1">
                        <MudStack>
                            <div Class="d-inline-flex align-center">
                                <MudIcon Icon="@Icons.Custom.FileFormats.FileDocument" Class="my-0 py-0" />
                                <MudText Typo="Typo.h5" Class="d-inline-flex pa-4">Markdown</MudText>
                            </div>
                            <MudText Typo="Typo.body1">Use it with Notion, Obsidian or most notes apps.</MudText>
                        </MudStack>
                    </MudPaper>
                </MudLink>
            </MudStack>
        }
        else{
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Style="height:100px;width:100px;" 
                Class="ma-2"/>
        }
    </DialogContent>
</MudDialog>

<script src="js/fileDownload.js"></script>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = new();
    [Parameter] 
    public StudyGuide StudyGuide { get; set; } = new();
    private bool _loading = false;

    private void CloseDialog() => MudDialog.Close(DialogResult.Ok(true));

    private async Task DownloadTextFile(TextFile file){
        var fileStream = new MemoryStream(file.GetContents());
        var fileName = file.GetFileName();
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task DownloadToMarkdown(){
        _loading = true;
        this.StateHasChanged();
        var mdFile = markdownExporter.ExportStudyGuide(StudyGuide);
        
        await DownloadTextFile(mdFile);
        _loading = false;
        CloseDialog();
    }
}
