@page "/studyguide"

@inject FragmentApi FragmentApi;
@inject IDialogService DialogService;

<PageTitle>pencilcase</PageTitle>

<MudDropContainer T="FragmentDropItem" Items="@_items"
    ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" 
    ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudGrid Spacing="4" Class="d-flex flex-grow-1">
            <MudItem sm="12" md="4" >
                <MudStack Wrap="Wrap.WrapReverse" Spacing="4">
                    <SearchBar Label="Choose a topic" OnSubmit="@OnSearchbarSubmit" />
                    <MudCard Elevation="3" Class="d-flex flex-grow-1 flex-column" Style="min-height:75vh">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Align="Align.Start">Sections</MudText>
                        </MudCardHeader>
                        <MudCardContent Class="d-flex flex-grow-1 flex-column pa-0">
                            <MudDropZone  T="FragmentDropItem" Identifier="@FragmentGeneratorIdentifier"
                                    Class="rounded-b mud-background-gray pa-2 flex-grow-1 overflow-x-scroll">
                                <div></div>
                            </MudDropZone>
                        </MudCardContent>
                    </MudCard>
                </MudStack>
            </MudItem>
            <MudItem sm="12" md="8">
                <MudCard Class="d-flex flex-grow-1" Style="min-height:100%" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Start">Draft</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <StudyGuideToolBar OnRenew="OnRegenerateStudyGuide" OnDelete="OnClearStudyGuide" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="d-flex flex-grow-1 flex-column pa-0">
                        <MudDropZone T="FragmentDropItem" Identifier="@StudyGuideIdentifier" 
                            Class="rounded-b mud-background-gray blueprint-dots pa-4 flex-grow-1 overflow-x-scroll"
                            AllowReorder="true">
                        <div>
                            @if(_items.Where(i => i.Identifier == StudyGuideIdentifier).Count() == 0){
                                <EmptyBlueprintContent />
                            }
                        </div>
                    </MudDropZone>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </ChildContent>
    <ItemRenderer>
        @if (@context.Identifier == FragmentGeneratorIdentifier)
        {
            <div class="ma-4">
                <FragmentGeneratorCard FragmentGenerator=@context.Generator/>
            </div>
        }
        else
        {
            <div class="ma-4">
                <FragmentCard Fragment=@context.Fragment 
                    OnRegenerateClicked="@RegenerateFragment"
                    OnDeleteClicked="@OnDeleteFragment" />
            </div>
        }
    </ItemRenderer>
</MudDropContainer>

<div style="position: fixed;bottom: 0pt;right: 0pt;">
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Rounded.Save" 
            OnClick="ExportStudyGuide" Size="Size.Large" Class="ma-6" Label="Save"/>
</div>

<style>
    .dialog-background {
        backdrop-filter: blur(20px);
    }
</style>

@code{
    private const String StudyGuideIdentifier = "StudyGuide";
    private const String FragmentGeneratorIdentifier = "Generators";

    private List<FragmentDropItem> _items { get; set; } = new();
    private String _topic = String.Empty;

    protected override async Task OnInitializedAsync(){
        List<FragmentGenerator>? generators = new();
            
        try{
            generators = await FragmentApi.GetAllGenerators();
        }
        catch(HttpRequestException err) {
            Console.WriteLine(err.Message);
        }
        if (generators != null) PopulateItemsWithGenerators(generators);
    }

    private StudyGuide FragmentsToStudyGuide(String topic, List<Fragment?>? fragments)
    {
        return new StudyGuide{
            Topic = topic,
            Fragments = (fragments != null) ? fragments : []
        };
    }

    private StudyGuide GetStudyGuideFromBlueprint()
    {
        var fragments = _items
            .Where(i => (i.Identifier == StudyGuideIdentifier && i.Fragment != null))
            .Select(i => i.Fragment).ToList();

        return FragmentsToStudyGuide(_topic, fragments);
    }

    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item!.Identifier = dropItem.DropzoneIdentifier!;
        // Add to study guide
        if (dropItem.Item.Identifier == StudyGuideIdentifier && dropItem.Item.Fragment == null)
        {
            dropItem.Item.Fragment = await GenerateFragmentWithGenerator(dropItem.Item.Generator);
            this.StateHasChanged();
        }
    }

    private void PopulateItemsWithGenerators(List<FragmentGenerator> generators)
    {
        foreach (var generator in generators)
        {
            _items.Add(new FragmentDropItem()
            {
                Identifier = FragmentGeneratorIdentifier,
                Generator = generator
            });
        }
    }

    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        if(_topic == String.Empty || _topic == null){
            return new Fragment{
                Name = generator.Name,
                Content = String.Empty
            };
        }
        return await FragmentApi.GenerateFragment(generator, _topic);
    }

    private async Task GenerateNewStudyGuide(String topic){
        _topic = topic;
        foreach(var item in _items.Where(i => i.Identifier == StudyGuideIdentifier)){
            var fragment = await GenerateFragmentWithGenerator(item.Generator);
            item.Fragment = fragment;
        }
        this.StateHasChanged();
    }

    private FragmentDropItem GetItemByName(String name){
        var item = _items.FirstOrDefault(i => i.Fragment?.Name == name);
        if(item == null){
            throw new ArgumentException($"Could not find fragment with name '{name}'!");
        }
        return item;
    }

    public async Task RegenerateFragment(String name)
    {
        var item = GetItemByName(name);
        item.Fragment = null;
        this.StateHasChanged();
        var generator = item.Generator;
        item.Fragment = await GenerateFragmentWithGenerator(generator);
        this.StateHasChanged();
    }

    public async Task OnSearchbarSubmit(String topic){
        EraseAllFragments();
        this.StateHasChanged();
        await GenerateNewStudyGuide(topic);
    }

    public async Task OnDeleteFragment(String name) 
    {
        var item = GetItemByName(name);
        item.Identifier = FragmentGeneratorIdentifier;
        this.StateHasChanged();
    }

    private async Task ExportStudyGuide()
    {
        var studyGuide = GetStudyGuideFromBlueprint();

        var options = new DialogOptions { 
            CloseOnEscapeKey = true,
            CloseButton = true,
            BackgroundClass="dialog-background"
        };

        var parameters = new DialogParameters<SGExportDialog> { { x => x.StudyGuide, studyGuide } };
        await DialogService.ShowAsync<SGExportDialog>("Save your Study Guide", parameters, options);
    }

    private void EraseAllFragments(){
        foreach (var item in _items){
            item.Fragment = null;
        }
        this.StateHasChanged();
    }

    public async Task OnRegenerateStudyGuide(){
        EraseAllFragments();
        await GenerateNewStudyGuide(_topic);
    }

    public async Task OnClearStudyGuide() 
    {
        foreach (var item in _items){
            item.Identifier = FragmentGeneratorIdentifier;
        }
        this.StateHasChanged();
    }
}