@page "/studyguide"

@inject FragmentApi FragmentApi;

<PageTitle>PencilCase</PageTitle>

<MudGrid Justify="Justify.Center" Spacing="0">
    <MudItem xs="10">
        <SearchBar OnSubmit="@GenerateNewStudyGuide"/>
    </MudItem>
    <MudFlexBreak />
    <MudItem xs="12">
        <StudyGuideBlueprint Items="@_items" OnItemUpdated="@ItemUpdated"
        StudyGuideIdentifier="@StudyGuideIdentifier" 
        FragmentGeneratorIdentifier="@FragmentGeneratorIdentifier"
        OnFragmentRegenerate="@RegenerateFragment"
        OnFragmentDelete="@OnDeleteFragment" />
    </MudItem>
</MudGrid>

@code{
    private const String StudyGuideIdentifier = "StudyGuide";
    private const String FragmentGeneratorIdentifier = "Generators";

    private List<FragmentDropItem> _items { get; set; } = new();
    private String _topic = String.Empty;

    protected override async Task OnInitializedAsync(){
        List<FragmentGenerator>? generators = new();
        try{
            generators = await FragmentApi.GetAllGenerators();
        }
        catch(HttpRequestException err) {
            Console.WriteLine(err.Message);
        }
        if (generators != null) PopulateItemsWithGenerators(generators);
    }

    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item!.Identifier = dropItem.DropzoneIdentifier!;
        // Add to study guide
        if (dropItem.Item.Identifier == StudyGuideIdentifier && dropItem.Item.Fragment == null)
        {
            dropItem.Item.Fragment = await GenerateFragmentWithGenerator(dropItem.Item.Generator);
        }
    }

    private void PopulateItemsWithGenerators(List<FragmentGenerator> generators)
    {
        foreach (var generator in generators)
        {
            _items.Add(new FragmentDropItem()
            {
                Identifier = FragmentGeneratorIdentifier,
                Generator = generator
            });
        }
    }

    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        if(_topic == String.Empty || _topic == null){
            return new Fragment{
                Name = generator.Name,
                Content = String.Empty
            };
        }
        return await FragmentApi.GenerateFragment(generator, _topic);
    }

    private async void GenerateNewStudyGuide(String topic){
        _topic = topic;
        foreach(var item in _items.Where(i => i.Identifier == StudyGuideIdentifier)){
            var fragment = await GenerateFragmentWithGenerator(item.Generator);
            item.Fragment = fragment;
        }
        this.StateHasChanged();
    }

    private FragmentDropItem GetItemByName(String name){
        var item = _items.FirstOrDefault(i => {Console.WriteLine(i.Fragment?.Name); return i.Fragment?.Name == name;});
        if(item == null){
            throw new ArgumentException($"Could not find fragment with name '{name}'!");
        }
        return item;
    }

    public async Task RegenerateFragment(String name)
    {
        var item = GetItemByName(name);
        item.Fragment = null;
        this.StateHasChanged();
        var generator = item.Generator;
        item.Fragment = await GenerateFragmentWithGenerator(generator);
        this.StateHasChanged();
    }

    public async Task OnDeleteFragment(String name) 
    {
        var item = GetItemByName(name);
        item.Identifier = FragmentGeneratorIdentifier;
        this.StateHasChanged();
    }
}