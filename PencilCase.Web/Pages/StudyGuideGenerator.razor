@page "/studyguide"

@inject FragmentApi FragmentApi;

<PageTitle>PencilCase</PageTitle>

<MudGrid Justify="Justify.Center" Spacing="0">
    <MudItem xs="10">
        <SearchBar OnSubmit="@GenerateNewStudyGuide"/>
    </MudItem>
    <MudFlexBreak />
    <MudItem xs="12">
        <StudyGuideBlueprint Items="@_items" OnItemUpdated="@ItemUpdated"
        StudyGuideIdentifier="@StudyGuideIdentifier" 
        FragmentGeneratorIdentifier="@FragmentGeneratorIdentifier"/>
    </MudItem>
</MudGrid>

@code{
    private const String StudyGuideIdentifier = "StudyGuide";
    private const String FragmentGeneratorIdentifier = "Generators";
    private List<FragmentDropItem> _items { get; set; } = new();
    public List<FragmentGenerator>? Generators;
    private String _topic = String.Empty;
    private StudyGuide? _studyGuide = null;

    protected override async Task OnInitializedAsync(){
        try{
            Generators = await FragmentApi.GetAllGenerators();
        }
        catch(HttpRequestException err) {
            Console.WriteLine(err.Message);
        }
        PopulateFragmentGenerators();
    }

    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item!.Identifier = dropItem.DropzoneIdentifier!;
        // Add to study guide
        if (dropItem.Item.Identifier == StudyGuideIdentifier && dropItem.Item.Fragment == null)
        {
            dropItem.Item.Fragment = await GenerateFragmentWithGenerator(dropItem.Item.Generator);
        }
    }

    private void PopulateFragmentGenerators()
    {
        if (Generators != null){
            foreach (var generator in Generators)
            {
                _items.Add(new FragmentDropItem()
                {
                    Identifier = FragmentGeneratorIdentifier,
                    Generator = generator
                });
            }
        }
    }
    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        if(_topic == String.Empty || _topic == null){
            return new Fragment{
                Name = generator.Name,
                Content = String.Empty
            };
        }
        return await FragmentApi.GenerateFragment(generator, _topic);
    }

    private async void GenerateNewStudyGuide(String topic){
        _topic = topic;
        _studyGuide = new StudyGuide();
        _studyGuide.Topic = topic;
        foreach(var item in _items.Where(i => i.Identifier == StudyGuideIdentifier)){
            var fragment = await GenerateFragmentWithGenerator(item.Generator);
            _studyGuide.Fragments.Add(fragment);
            item.Fragment = fragment;
        }
        this.StateHasChanged();
    }
}