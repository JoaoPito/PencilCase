@page "/studyguide"

@inject FragmentApi FragmentApi;

<PageTitle>PencilCase</PageTitle>

<MudDropContainer T="FragmentDropItem" Items="_items"
                ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" 
                ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudStack Row="true" Justify="Justify.Center" StretchItems="StretchItems.Start" 
                Class="d-flex flex-grow-1">
            <MudCard Class="d-flex flex-grow-1 flex-column" Style="width:60%">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">Blueprint</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <StudyGuideTitleBar />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="d-flex flex-grow-1 flex-column">
                    <MudDropZone T="FragmentDropItem" Identifier="Study Guide" 
                    Class="rounded mud-background-gray pa-4 flex-grow-1" 
                    AllowReorder="true">
                    <div></div>
                </MudDropZone>
                </MudCardContent>
                
            </MudCard>
            
            <div style="position: fixed;bottom: 0pt;right: 0pt;">
                <MudStack Wrap="Wrap.WrapReverse" Spacing="0" Class="mx-4">
                    @if(_showTools){
                        <MudPaper Elevation="6" Width="250pt" Class="d-flex flex-grow-1 flex-column">
                            <MudText Typo="Typo.h6" Align="Align.Center">Sections</MudText>
                                <MudDropZone  T="FragmentDropItem" Identifier="Sections"
                                        Class="rounded mud-background-gray pa-2 ma-2 flex-grow-1">
                                    <div></div>
                                </MudDropZone>
                        </MudPaper>
                    }
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" 
                        OnClick="ToggleTools" Size="Size.Large" Class="ma-4"/>
                </MudStack>
                
            </div>
        </MudStack>
    </ChildContent>
    <ItemRenderer>
        @if (@context.Identifier == "Sections")
        {
            <div class="ma-4">
                <FragmentGeneratorCard FragmentGenerator=@context.Generator/>
            </div>
        }
        else
        {
            <div class="ma-4">
                <FragmentCard Fragment=@context.Fragment />
            </div>
        }
        
    </ItemRenderer>
</MudDropContainer>

@code{

    private List<FragmentDropItem> _items { get; set; } = new();

    public class FragmentDropItem
    {
        public String Identifier { get; set; }
        public FragmentGenerator Generator { get; set; }
        public Fragment? Fragment { get; set; } = null;
    }
    
    private async void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        // Add to study guide
        if (dropItem.Item.Identifier == "Study Guide" && dropItem.Item.Fragment == null)
        {
            dropItem.Item.Fragment = await GenerateFragmentWithGenerator(dropItem.Item.Generator);
        }
        this.StateHasChanged();
    }
    
    public List<FragmentGenerator>? Generators;

    private bool _showTools = true;

    protected override async Task OnInitializedAsync(){
        Generators = await FragmentApi.GetAllGenerators();
        if (Generators != null)
            PopulateFragmentGenerators();
    }

    private void PopulateFragmentGenerators()
    {
        foreach (var generator in Generators)
        {
            _items.Add(new FragmentDropItem()
            {
                Identifier = "Sections",
                Generator = generator
            });
        }
    }

    private async Task<Fragment> GenerateFragmentWithGenerator(FragmentGenerator generator)
    {
        return await FragmentApi.GenerateFragment(generator, "rockets");
    }

    private void ToggleTools(){
        _showTools = !_showTools;
        this.StateHasChanged();
    }
}