<MudDropContainer T="FragmentDropItem" Items="Items"
    ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" 
    ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudCard Class="d-flex flex-grow-1" Style="min-height:66vh">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">Blueprint</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <StudyGuideToolBar />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="d-flex flex-grow-1 flex-column">
                <MudDropZone T="FragmentDropItem" Identifier="@StudyGuideIdentifier" 
                Class="rounded mud-background-gray pa-4 flex-grow-1"
                AllowReorder="true">
                <div></div>
            </MudDropZone>
            </MudCardContent>
        </MudCard>
    <div style="position: fixed;bottom: 0pt;right: 0pt;">
        <MudStack Wrap="Wrap.WrapReverse" Spacing="0" Class="mx-4">
            @if(_showTools){
                <MudPaper Elevation="6" Width="250pt" Height="66vh" Class="d-flex flex-grow-1 flex-column mt-2">
                    <MudText Typo="Typo.h6" Align="Align.Center">Sections</MudText>
                        <MudDropZone  T="FragmentDropItem" Identifier="@FragmentGeneratorIdentifier"
                                Class="rounded mud-background-gray pa-2 ma-2 flex-grow-1 overflow-x-scroll">
                            <div></div>
                        </MudDropZone>
                </MudPaper>
            }
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" 
                OnClick="ToggleTools" Size="Size.Large" Class="ma-4"/>
        </MudStack>
    </div>
    </ChildContent>
    <ItemRenderer>
        @if (@context.Identifier == FragmentGeneratorIdentifier)
        {
            <div class="ma-4">
                <FragmentGeneratorCard FragmentGenerator=@context.Generator/>
            </div>
        }
        else
        {
            <div class="ma-4">
                <FragmentCard Fragment=@context.Fragment OnRegenerateClicked="@OnFragmentRegenerate" />
            </div>
        }
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter] public IEnumerable<FragmentDropItem> Items { get; set; } = new List<FragmentDropItem>();
    [Parameter] public String StudyGuideIdentifier { get; set; } = String.Empty;
    [Parameter] public String FragmentGeneratorIdentifier { get; set; } = String.Empty;
    [Parameter] public Action<MudItemDropInfo<FragmentDropItem>>? OnItemUpdated { get; set; }
    [Parameter] public Func<String, Task>? OnFragmentRegenerate { get; set; }

    private bool _showTools = true;

    private void ItemUpdated(MudItemDropInfo<FragmentDropItem> dropItem)
    {
        if(OnItemUpdated != null) OnItemUpdated(dropItem);
        this.StateHasChanged();
    }

    private void ToggleTools(){
        _showTools = !_showTools;
        this.StateHasChanged();
    }
}